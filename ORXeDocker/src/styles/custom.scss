// @import '~@angular/material/theming';

// @mixin amte-parent-theme($theme) {
//   $primary: map-get($theme, primary);
//   $accent: map-get($theme, accent);
//   $warn: map-get($theme, warn);
//   $foreground: map-get($theme, foreground);
//   $background: map-get($theme, background);

//   amte-parent {
//     >div {
//       background-color: mat-color($background, card);

//       >h1 {
//         color: mat-color($foreground, text);
//       }
//     }
//   }

// }

// @import '~@angular/material/theming';

// // mixin name will be used in main style.scss
// @mixin Dynamic-Component-theme($theme) {
  
//   // retrieve variables from theme 
//   // (all possible variables, use only what you really need)
//   $primary: map-get($theme, primary);
//   $accent: map-get($theme, accent);
//   $warn: map-get($theme, accent);
//   $foreground: map-get($theme, foreground);
//   $background: map-get($theme, background);
  
//   // all of these variables contain many additional variables

// //   big-input {

// //     input {
    
// //       // retrieve particular color from variable, rg: text, base, divider, ...
// //       color: mat-color($foreground, text);
// //       background-color: mat-color($background, card);
      
// //       // or use "default" subvariable by default, oh the puns :)
// //       border: 1px solid mat-color($accent);
// //     }
// //   }
// amte-parent{
//     >div{
//         background-color: mat-color($primary, lighter);
//         >h1{
//             color: mat-color($primary,default);
//         }
//     }
// }
// }

// @mixin custom-components-theme($theme) {
//     @include Dynamic-Component-theme($theme);
//   }


@import '~@angular/material/theming';

@include mat-core();
// custom background and foreground palettes
$my-dark-theme-background: (
  status-bar: green,
  app-bar:    map_get($mat-blue, 900),
  background: orange,
  hover:      rgba(white, 0.04), 
  card:       map_get($mat-red, 800),
  dialog:     map_get($mat-grey, 800),
  disabled-button: $white-12-opacity,
  raised-button: map-get($mat-grey, 800),
  focused-button: $white-6-opacity,
  selected-button: map_get($mat-grey, 900),
  selected-disabled-button: map_get($mat-grey, 800),
  disabled-button-toggle: black,
  unselected-chip: map_get($mat-grey, 700),
  disabled-list-option: black,
);

$my-dark-theme-foreground: (
  base:              yellow,
  divider:           $white-12-opacity,
  dividers:          $white-12-opacity,
  disabled:          rgba(white, 0.3),
  disabled-button:   rgba(white, 0.3),
  disabled-text:     rgba(white, 0.3),
  hint-text:         rgba(white, 0.3),
  secondary-text:    rgba(white, 0.7),
  icon:              white,
  icons:             white,
  text:              yellow,
  slider-min:        white,
  slider-off:        rgba(white, 0.3),
  slider-off-active: rgba(white, 0.3),
);


// instead of creating a theme with mat-light-theme like a sane person, we will create our own theme-creating function that lets us apply our own foreground and background palettes.
@function create-wonky-theme($primary, $accent, $warn: mat-palette($mat-red)) {
  @return (
    primary: $primary,
    accent: $accent,
    warn: $warn,
    is-dark: false,
    foreground: $my-dark-theme-foreground,
    background: $my-dark-theme-background,
  );
}

// The rest of this is like a normal theme.scss file. The only difference being that we use create-wonky-theme instead of mat-light-theme
$custom-theme-primary: mat-palette($mat-green);
$custom-theme-accent: mat-palette($mat-blue);
$custom-theme-warn: mat-palette($mat-red);

$custom-theme: create-wonky-theme($custom-theme-primary, $custom-theme-accent, $custom-theme-warn);

//@include angular-material-theme($custom-theme);